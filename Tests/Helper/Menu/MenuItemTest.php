<?php
namespace Kunstmaan\AdminBundle\Tests\Helper\Menu;

use Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem;
use Kunstmaan\AdminBundle\Helper\Menu\TopMenuItem;
use Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-21 at 09:05:10.
 */
class MenuItemTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var OldMenuItem
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        /* @var $menuBuilder OldMenuBuilder */
        $menuBuilder = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder')
            ->disableOriginalConstructor()
            ->getMock();

        $this->object = new OldMenuItem($menuBuilder);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getMenu
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::__construct
     */
    public function testGetMenu()
    {
        /* @var $menuBuilder OldMenuBuilder */
        $menuBuilder = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder')
            ->disableOriginalConstructor()
            ->getMock();

        $object = new OldMenuItem($menuBuilder);
        $this->assertEquals($menuBuilder, $object->getMenu());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getInternalName
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setInternalName
     */
    public function testGetSetInternalName()
    {
        $this->object->setInternalName('Internal name');
        $this->assertEquals('Internal name', $this->object->getInternalName());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getRole
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setRole
     */
    public function testGetSetRole()
    {
        $this->object->setRole('ROLE_GUEST');
        $this->assertEquals('ROLE_GUEST', $this->object->getRole());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getParent
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setParent
     */
    public function testGetSetParent()
    {
        /* @var $menuBuilder OldMenuBuilder */
        $menuBuilder = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder')
            ->disableOriginalConstructor()
            ->getMock();
        $parent = new OldMenuItem($menuBuilder);
        $this->object->setParent($parent);
        $this->assertEquals($parent, $this->object->getParent());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getRoute
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setRoute
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getRouteParams
     */
    public function testGetSetRoute()
    {
        $params = array('id' => 5);
        $this->object->setRoute('ARoute', $params);

        $this->assertEquals('ARoute', $this->object->getRoute());
        $this->assertEquals($params, $this->object->getRouteParams());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getRouteParams
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setRouteParams
     */
    public function testGetSetRouteParams()
    {
        $params = array('id' => 1);
        $this->object->setRouteParams($params);
        $this->assertEquals($params, $this->object->getRouteParams());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getChildren
     */
    public function testGetChildren()
    {
        $child1 = new OldMenuItem($this->object->getMenu());
        $child1->setAppearInNavigation(true);
        $child2 = new OldMenuItem($this->object->getMenu());
        $child2->setAppearInNavigation(true);
        $children = array($child1, $child2);


        $menuBuilder = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder')
            ->disableOriginalConstructor()
            ->getMock();
        $menuBuilder->expects($this->once())
            ->method('getChildren')
            ->will($this->returnValue($children));

        /* @var $menuBuilder OldMenuBuilder */
        $parent = new OldMenuItem($menuBuilder);
        $result = $parent->getChildren();
        $this->assertEquals(2, count($result));
        $this->assertEquals($children, $result);
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getNavigationChildren
     */
    public function testGetNavigationChildren()
    {
        $child1 = new OldMenuItem($this->object->getMenu());
        $child1->setAppearInNavigation(true);
        $child2 = new OldMenuItem($this->object->getMenu());
        $child2->setAppearInNavigation(false);
        $children = array($child1, $child2);

        $menuBuilder = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder')
            ->disableOriginalConstructor()
            ->getMock();
        $menuBuilder->expects($this->once())
            ->method('getChildren')
            ->will($this->returnValue($children));

        /* @var $menuBuilder OldMenuBuilder */
        $parent = new OldMenuItem($menuBuilder);
        $result = $parent->getNavigationChildren();
        $this->assertEquals(1, count($result));
        $this->assertEquals(array($child1), $result);
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getTopChildren
     */
    public function testGetTopChildren()
    {
        $child1 = new OldMenuItem($this->object->getMenu());
        $child2 = new TopMenuItem($this->object->getMenu());
        $children = array($child1, $child2);

        $menuBuilder = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\Menu\OldMenuBuilder')
            ->disableOriginalConstructor()
            ->getMock();
        $menuBuilder->expects($this->once())
            ->method('getChildren')
            ->will($this->returnValue($children));

        /* @var $menuBuilder OldMenuBuilder */
        $parent = new OldMenuItem($menuBuilder);
        $result = $parent->getTopChildren();
        $this->assertEquals(1, count($result));
        $this->assertEquals(array($child2), $result);
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::addAttributes
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getAttributes
     */
    public function testAddGetAttributes()
    {
        $attributes = array('attribute1' => 1, 'attribute2' => 2);
        $this->object->addAttributes($attributes);
        $this->assertEquals($attributes, $this->object->getAttributes());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getActive
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setActive
     */
    public function testGetSetActive()
    {
        $this->object->setActive(true);
        $this->assertTrue($this->object->getActive());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getAppearInNavigation
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setAppearInNavigation
     */
    public function testGetSetAppearInNavigation()
    {
        $this->object->setAppearInNavigation(true);
        $this->assertTrue($this->object->getAppearInNavigation());
    }

    /**
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::getWeight
     * @covers Kunstmaan\AdminBundle\Helper\Menu\OldMenuItem::setWeight
     */
    public function testGetSetWeight()
    {
        $this->object->setWeight(10);
        $this->assertEquals(10, $this->object->getWeight());
    }
}
